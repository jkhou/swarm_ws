// Generated by gencpp from file ftmotor/Flow.msg
// DO NOT EDIT!


#ifndef FTMOTOR_MESSAGE_FLOW_H
#define FTMOTOR_MESSAGE_FLOW_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ftmotor
{
template <class ContainerAllocator>
struct Flow_
{
  typedef Flow_<ContainerAllocator> Type;

  Flow_()
    : header()
    , vx(0.0)
    , vy(0.0)
    , pos()
    , theta()
    , hight(0.0)
    , valid(0)
    , quality(0)  {
      pos.assign(0.0);

      theta.assign(0.0);
  }
  Flow_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , vx(0.0)
    , vy(0.0)
    , pos()
    , theta()
    , hight(0.0)
    , valid(0)
    , quality(0)  {
  (void)_alloc;
      pos.assign(0.0);

      theta.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _vx_type;
  _vx_type vx;

   typedef float _vy_type;
  _vy_type vy;

   typedef boost::array<float, 3>  _pos_type;
  _pos_type pos;

   typedef boost::array<float, 3>  _theta_type;
  _theta_type theta;

   typedef float _hight_type;
  _hight_type hight;

   typedef uint8_t _valid_type;
  _valid_type valid;

   typedef uint8_t _quality_type;
  _quality_type quality;





  typedef boost::shared_ptr< ::ftmotor::Flow_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ftmotor::Flow_<ContainerAllocator> const> ConstPtr;

}; // struct Flow_

typedef ::ftmotor::Flow_<std::allocator<void> > Flow;

typedef boost::shared_ptr< ::ftmotor::Flow > FlowPtr;
typedef boost::shared_ptr< ::ftmotor::Flow const> FlowConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ftmotor::Flow_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ftmotor::Flow_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ftmotor::Flow_<ContainerAllocator1> & lhs, const ::ftmotor::Flow_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.pos == rhs.pos &&
    lhs.theta == rhs.theta &&
    lhs.hight == rhs.hight &&
    lhs.valid == rhs.valid &&
    lhs.quality == rhs.quality;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ftmotor::Flow_<ContainerAllocator1> & lhs, const ::ftmotor::Flow_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ftmotor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ftmotor::Flow_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ftmotor::Flow_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ftmotor::Flow_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ftmotor::Flow_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ftmotor::Flow_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ftmotor::Flow_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ftmotor::Flow_<ContainerAllocator> >
{
  static const char* value()
  {
    return "25d2bfe030c1d5b1bb0b07b36bea3b01";
  }

  static const char* value(const ::ftmotor::Flow_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x25d2bfe030c1d5b1ULL;
  static const uint64_t static_value2 = 0xbb0b07b36bea3b01ULL;
};

template<class ContainerAllocator>
struct DataType< ::ftmotor::Flow_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ftmotor/Flow";
  }

  static const char* value(const ::ftmotor::Flow_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ftmotor::Flow_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32 vx\n"
"float32 vy\n"
"float32[3] pos\n"
"float32[3] theta\n"
"float32 hight\n"
"uint8 valid\n"
"uint8 quality\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ftmotor::Flow_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ftmotor::Flow_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.pos);
      stream.next(m.theta);
      stream.next(m.hight);
      stream.next(m.valid);
      stream.next(m.quality);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Flow_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ftmotor::Flow_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ftmotor::Flow_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "pos[]" << std::endl;
    for (size_t i = 0; i < v.pos.size(); ++i)
    {
      s << indent << "  pos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pos[i]);
    }
    s << indent << "theta[]" << std::endl;
    for (size_t i = 0; i < v.theta.size(); ++i)
    {
      s << indent << "  theta[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.theta[i]);
    }
    s << indent << "hight: ";
    Printer<float>::stream(s, indent + "  ", v.hight);
    s << indent << "valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid);
    s << indent << "quality: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.quality);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FTMOTOR_MESSAGE_FLOW_H
